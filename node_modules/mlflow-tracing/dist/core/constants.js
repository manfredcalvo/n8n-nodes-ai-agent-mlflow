"use strict";
/**
 * Constants for MLflow Tracing
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.REQUEST_RESPONSE_PREVIEW_MAX_LENGTH = exports.TokenUsageKey = exports.NO_OP_SPAN_TRACE_ID = exports.DEFAULT_SPAN_NAME = exports.TRACE_ID_PREFIX = exports.TRACE_SCHEMA_VERSION = exports.TraceTagKey = exports.TraceMetadataKey = exports.SpanAttributeKey = exports.SpanType = void 0;
/**
 * Enum for span types that can be used with MLflow Tracing
 */
var SpanType;
(function (SpanType) {
    SpanType["LLM"] = "LLM";
    SpanType["CHAIN"] = "CHAIN";
    SpanType["AGENT"] = "AGENT";
    SpanType["TOOL"] = "TOOL";
    SpanType["CHAT_MODEL"] = "CHAT_MODEL";
    SpanType["RETRIEVER"] = "RETRIEVER";
    SpanType["PARSER"] = "PARSER";
    SpanType["EMBEDDING"] = "EMBEDDING";
    SpanType["RERANKER"] = "RERANKER";
    SpanType["UNKNOWN"] = "UNKNOWN";
})(SpanType || (exports.SpanType = SpanType = {}));
/**
 * Constants for MLflow span attribute keys
 */
exports.SpanAttributeKey = {
    EXPERIMENT_ID: 'mlflow.experimentId',
    TRACE_ID: 'mlflow.traceRequestId',
    INPUTS: 'mlflow.spanInputs',
    OUTPUTS: 'mlflow.spanOutputs',
    SPAN_TYPE: 'mlflow.spanType',
    // This attribute is used to store token usage information from LLM responses.
    // Stored in {"input_tokens": int, "output_tokens": int, "total_tokens": int} format.
    TOKEN_USAGE: 'mlflow.chat.tokenUsage'
};
/**
 * Constants for MLflow trace metadata keys
 */
exports.TraceMetadataKey = {
    SOURCE_RUN: 'mlflow.sourceRun',
    MODEL_ID: 'mlflow.modelId',
    SIZE_BYTES: 'mlflow.trace.sizeBytes',
    SCHEMA_VERSION: 'mlflow.traceSchemaVersion',
    TOKEN_USAGE: 'mlflow.trace.tokenUsage',
    // Deprecated, do not use. These fields are used for storing trace request and response
    // in MLflow 2.x. In MLflow 3.x, these are replaced in favor of the request_preview and
    // response_preview fields in the trace info.
    // TODO: Remove this once the new trace table UI is available that is based on MLflow V3 trace.
    INPUTS: 'mlflow.traceInputs',
    OUTPUTS: 'mlflow.traceOutputs'
};
/**
 * Constants for MLflow trace tag keys
 */
exports.TraceTagKey = {
    MLFLOW_ARTIFACT_LOCATION: 'mlflow.artifactLocation'
};
/**
 * Current version of the MLflow trace schema
 */
exports.TRACE_SCHEMA_VERSION = '3';
/**
 * The prefix for MLflow trace IDs
 */
exports.TRACE_ID_PREFIX = 'tr-';
/**
 * The default name for spans if the name is not provided when starting a span
 */
exports.DEFAULT_SPAN_NAME = 'span';
/**
 * Trace ID for no-op spans
 */
exports.NO_OP_SPAN_TRACE_ID = 'no-op-span-trace-id';
/**
 * Constants for token usage keys (matching Python TokenUsageKey)
 */
exports.TokenUsageKey = {
    INPUT_TOKENS: 'input_tokens',
    OUTPUT_TOKENS: 'output_tokens',
    TOTAL_TOKENS: 'total_tokens'
};
/**
 * Max length of the request/response preview in the trace info.
 */
exports.REQUEST_RESPONSE_PREVIEW_MAX_LENGTH = 1000;
