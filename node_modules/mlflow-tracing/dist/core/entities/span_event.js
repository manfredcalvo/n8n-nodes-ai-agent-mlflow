"use strict";
/**
 * MLflow Span Event Entities
 *
 * This module provides TypeScript implementations of MLflow span event entities,
 * compatible with OpenTelemetry for recording specific occurrences during span execution.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanEvent = void 0;
/**
 * Represents an event that records specific occurrences or moments in time
 * during a span, such as an exception being thrown. Compatible with OpenTelemetry.
 *
 * SpanEvents are used to capture important moments during span execution,
 * providing detailed context about what happened and when.
 *
 * @example
 * ```typescript
 * // Create a custom event
 * const event = new SpanEvent({
 *   name: 'user_action',
 *   attributes: {
 *     'action.type': 'click',
 *     'element.id': 'submit-button'
 *   }
 * });
 *
 * // Create an event from an exception
 * const errorEvent = SpanEvent.fromException(new Error('Something went wrong'));
 * ```
 */
class SpanEvent {
    /**
     * Creates a new SpanEvent instance.
     *
     * @param params - Event parameters including name, optional timestamp, and attributes
     *
     * @example
     * ```typescript
     * const event = new SpanEvent({
     *   name: 'database_query',
     *   attributes: {
     *     'db.statement': 'SELECT * FROM users',
     *     'db.duration_ms': 150
     *   }
     * });
     * ```
     */
    constructor(params) {
        this.name = params.name;
        this.timestamp = params.timestamp ?? this.getCurrentTimeNano();
        this.attributes = params.attributes ?? {};
    }
    /**
     * Creates a span event from an exception.
     *
     * This is a convenience method for creating events that represent exceptions
     * or errors that occurred during span execution. The event will include
     * standard exception attributes like message, type, and stack trace.
     *
     * @param exception - The exception to create an event from
     * @returns New SpanEvent instance representing the exception
     *
     * @example
     * ```typescript
     * try {
     *   // Some operation that might fail
     *   throw new Error('Database connection failed');
     * } catch (error) {
     *   const errorEvent = SpanEvent.fromException(error);
     *   span.addEvent(errorEvent);
     * }
     * ```
     */
    static fromException(exception) {
        const stackTrace = this.getStackTrace(exception);
        return new SpanEvent({
            name: 'exception',
            attributes: {
                'exception.message': exception.message,
                'exception.type': exception.name,
                'exception.stacktrace': stackTrace
            }
        });
    }
    /**
     * Gets the stack trace from an error object.
     *
     * @param error - The error to extract stack trace from
     * @returns Stack trace as a string, or error representation if stack trace unavailable
     */
    static getStackTrace(error) {
        try {
            return error.stack ?? String(error);
        }
        catch {
            // Fallback if stack trace extraction fails
            return String(error);
        }
    }
    /**
     * Convert this SpanEvent to JSON format
     * @returns JSON object representation of the span event
     */
    toJson() {
        return {
            name: this.name,
            timestamp: this.timestamp,
            attributes: this.attributes
        };
    }
    /**
     * Gets the current time in nanoseconds since epoch.
     *
     * @returns Current timestamp in nanoseconds
     */
    getCurrentTimeNano() {
        return BigInt(Date.now()) * BigInt(1e6);
    }
}
exports.SpanEvent = SpanEvent;
