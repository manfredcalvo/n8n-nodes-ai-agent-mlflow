"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpanStatus = exports.SpanStatusCode = void 0;
const api_1 = require("@opentelemetry/api");
/**
 * MLflow Span Status module
 *
 * This module provides the MLflow SpanStatusCode enum and SpanStatus class,
 * matching the Python MLflow implementation.
 */
/**
 * Enum for status code of a span
 * Uses the same set of status codes as OTLP SpanStatusCode
 * https://github.com/open-telemetry/opentelemetry-proto/blob/189b2648d29aa6039aeb2
lemetry/proto/trace/v1/trace.proto#L314-L322
 */
var SpanStatusCode;
(function (SpanStatusCode) {
    /** Status is unset/unspecified */
    SpanStatusCode["UNSET"] = "STATUS_CODE_UNSET";
    /** The operation completed successfully */
    SpanStatusCode["OK"] = "STATUS_CODE_OK";
    /** The operation encountered an error */
    SpanStatusCode["ERROR"] = "STATUS_CODE_ERROR";
})(SpanStatusCode || (exports.SpanStatusCode = SpanStatusCode = {}));
/**
 * Status of the span or the trace.
 */
class SpanStatus {
    /**
     * Create a new SpanStatus instance
     * @param statusCode The status code - must be one of SpanStatusCode enum values
     * @param description Optional description, typically used for ERROR status
     */
    constructor(statusCode, description = '') {
        // If user provides a string status code, validate it and convert to enum
        this.statusCode = statusCode;
        this.description = description;
    }
    /**
     * Convert SpanStatus object to OpenTelemetry status object.
     */
    toOtelStatus() {
        let otelStatusCode;
        switch (this.statusCode) {
            case SpanStatusCode.OK:
                otelStatusCode = api_1.SpanStatusCode.OK;
                break;
            case SpanStatusCode.ERROR:
                otelStatusCode = api_1.SpanStatusCode.ERROR;
                break;
            case SpanStatusCode.UNSET:
            default:
                otelStatusCode = api_1.SpanStatusCode.UNSET;
                break;
        }
        return {
            code: otelStatusCode,
            message: this.description
        };
    }
    /**
     * Convert OpenTelemetry status object to SpanStatus object.
     */
    static fromOtelStatus(otelStatus) {
        let statusCode;
        switch (otelStatus.code) {
            case api_1.SpanStatusCode.OK:
                statusCode = SpanStatusCode.OK;
                break;
            case api_1.SpanStatusCode.ERROR:
                statusCode = SpanStatusCode.ERROR;
                break;
            case api_1.SpanStatusCode.UNSET:
            default:
                statusCode = SpanStatusCode.UNSET;
                break;
        }
        return new SpanStatus(statusCode, otelStatus.message ?? '');
    }
    /**
     * Convert this SpanStatus to JSON format
     * @returns JSON object representation of the span status
     */
    toJson() {
        return {
            status_code: this.statusCode,
            description: this.description
        };
    }
}
exports.SpanStatus = SpanStatus;
