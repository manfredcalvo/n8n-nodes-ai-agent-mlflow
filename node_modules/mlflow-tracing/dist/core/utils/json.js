"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JSONBig = void 0;
exports.safeJsonStringify = safeJsonStringify;
const json_bigint_1 = __importDefault(require("json-bigint"));
const fast_safe_stringify_1 = __importDefault(require("fast-safe-stringify"));
// Configure json-bigint to handle large integers
const JSONBig = (0, json_bigint_1.default)({
    useNativeBigInt: true,
    alwaysParseAsBig: false,
    storeAsString: false
});
exports.JSONBig = JSONBig;
/**
 * Safely stringify a value to JSON, handling circular references and non-serializable objects.
 * Uses fast-safe-stringify for optimal performance and reliability.
 *
 * @param value The value to stringify
 * @returns JSON string representation of the value
 */
function safeJsonStringify(value) {
    // MLflow-specific replacer that handles functions, undefined, and errors
    const mlflowReplacer = (_key, val) => {
        if (typeof val === 'function') {
            return '[Function]';
        }
        if (val === undefined) {
            return '[Undefined]';
        }
        if (val instanceof Error) {
            return {
                name: val.name,
                message: val.message,
                stack: val.stack
            };
        }
        return val;
    };
    // Use fast-safe-stringify with our MLflow replacer
    // The circular reference detection is handled by fast-safe-stringify itself
    return (0, fast_safe_stringify_1.default)(value, mlflowReplacer);
}
