/**
 * Configuration options for the MLflow tracing SDK
 */
export interface MLflowTracingConfig {
    /**
     * The host where traces will be logged.
     * Can be:
     * - HTTP URI for MLflow trace server backend
     * - "databricks" (uses default profile)
     * - "databricks://profile" (uses specific profile)
     */
    trackingUri: string;
    /**
     * The experiment ID where traces will be logged
     */
    experimentId: string;
    /**
     * The location of the Databricks config file, default to ~/.databrickscfg
     */
    databricksConfigPath?: string;
    /**
     * The Databricks host. If not provided, the host will be read from the Databricks config file.
     */
    host?: string;
    /**
     * The Databricks token. If not provided, the token will be read from the Databricks config file.
     */
    databricksToken?: string;
}
/**
 * Configure the MLflow tracing SDK with tracking location settings.
 * This must be called before using other tracing functions.
 *
 * @param config Configuration object with trackingUri and experimentId
 *
 * @example
 * ```typescript
 * import { init, withSpan } from 'mlflow-tracing-ts';
 *
 * // Option 1: Use MLflow Tracking Server
 * init({
 *   trackingUri: "http://localhost:5000",
 *   experimentId: "123456789"
 * });
 *
 * // Option 2: Use default Databricks profile from ~/.databrickscfg
 * init({
 *   trackingUri: "databricks",
 *   experimentId: "123456789"
 * });
 *
 * // Option 3: Use specific Databricks profile
 * init({
 *   trackingUri: "databricks://my-profile",
 *   experimentId: "123456789"
 * });
 *
 * // Option 4: Custom config file path
 * init({
 *   trackingUri: "databricks",
 *   experimentId: "123456789",
 *   databricksConfigPath: "/path/to/my/databrickscfg"
 * });
 *
 * // Option 5: Override with explicit host/token (bypasses config file)
 * init({
 *   trackingUri: "databricks",
 *   experimentId: "123456789",
 *   host: "https://my-workspace.databricks.com",
 *   databricksToken: "my-token"
 * });
 *
 * // Now you can use tracing functions
 * function add(a: number, b: number) {
 *   return withSpan(
 *     { name: 'add', inputs: { a, b } },
 *     (span) => {
 *       const result = a + b;
 *       span.setOutputs({ result });
 *       return result;
 *     }
 *   );
 * }
 * ```
 */
export declare function init(config: MLflowTracingConfig): void;
/**
 * Get the current configuration. Throws an error if not configured.
 * @returns The current MLflow tracing configuration
 */
export declare function getConfig(): MLflowTracingConfig;
/**
 * Read Databricks configuration from .databrickscfg file
 * @internal This function is exported only for testing purposes
 * @param configPath Path to the Databricks config file
 * @param profile Profile name to read (defaults to 'DEFAULT')
 * @returns Object containing host and token
 */
export declare function readDatabricksConfig(configPath: string, profile?: string): {
    host: string;
    token: string;
};
