import { TraceInfo } from '../core/entities/trace_info';
import { Trace } from '../core/entities/trace';
import { TraceData } from '../core/entities/trace_data';
/**
 * Client for MLflow tracing operations
 */
export declare class MlflowClient {
    /** MLflow tracking server host or Databricks workspace URL */
    private host;
    /** Databricks personal access token */
    private databricksToken?;
    /** Client implementation to upload/download trace data artifacts */
    private artifactsClient;
    constructor(options: {
        trackingUri: string;
        host: string;
        databricksToken?: string;
    });
    /**
     * Create a new TraceInfo record in the backend store.
     * Corresponding to the Python SDK's start_trace_v3() method.
     *
     * Note: the backend API is named as "Start" due to unfortunate miscommunication.
     * The API is indeed called at the "end" of a trace, not the "start".
     */
    createTrace(traceInfo: TraceInfo): Promise<TraceInfo>;
    /**
     * Get a single trace by ID
     * Fetches both trace info and trace data from backend
     * Corresponds to Python: client.get_trace()
     */
    getTrace(traceId: string): Promise<Trace>;
    /**
     * Get trace info using V3 API
     * Endpoint: GET /api/3.0/mlflow/traces/{trace_id}
     */
    getTraceInfo(traceId: string): Promise<TraceInfo>;
    /**
     * Upload trace data to the artifact store.
     */
    uploadTraceData(traceInfo: TraceInfo, traceData: TraceData): Promise<void>;
    /**
     * Create a new experiment
     */
    createExperiment(name: string, artifactLocation?: string, tags?: Record<string, string>): Promise<string>;
    /**
     * Delete an experiment
     */
    deleteExperiment(experimentId: string): Promise<void>;
}
